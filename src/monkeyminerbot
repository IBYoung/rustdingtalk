use async_std::task;
use std::process::Command;

// The need for Ok with turbofish is explained here
// https://rust-lang.github.io/async-book/07_workarounds/03_err_in_async_blocks.html
fn main() -> Result<(), http_types::Error> {
    let output = Command::new("/bin/bash")
        .arg("/Users/sherlock/worker1.sh")
        .output()
        .expect("failed to execute process");
    let result = String::from_utf8_lossy(&output.stdout).to_string();
    println!("status: {}", output.status);
    println!("========================================================");

    if result.contains("ERROR") {
        println!("stdout: {}", result);
    }else {

    }
    println!("========================================================");
    println!("stderr: {}", String::from_utf8_lossy(&output.stderr));
    femme::start(log::LevelFilter::Info).unwrap();
    task::block_on(async {
        let uri = "dingding notify url";
        let data = serde_json::json!({ "title": "蒙起D路飞","text":"D之一族" });
        let res = surf::post(uri).body_json(&data).unwrap().await?;
        assert_eq!(res.status(), http_types::StatusCode::Ok);
        Ok::<(), http_types::Error>(())
    })
}
