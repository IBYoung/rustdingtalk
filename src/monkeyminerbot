extern crate job_scheduler;

use job_scheduler::{JobScheduler, Job};
use std::time::Duration;
use async_std::task;
use std::process::Command;

fn main() -> Result<(), http_types::Error> {
    let mut sched = JobScheduler::new();

    sched.add(Job::new("1/20 * * * * *".parse().unwrap(), || {
        println!("I get executed every 20 seconds!");
        // let slice = "hello world";
        // let index = slice.find("world").unwrap();

        let output = Command::new("/bin/bash")
            .arg("/Users/sherlock/worker1.sh")
            .output()
            .expect("failed to execute process");
        let result = String::from_utf8_lossy(&output.stdout).to_string();
        println!("status: {}", output.status);
        println!("========================================================");
        println!("stdout: {}", result);
        println!("========================================================");
        task::block_on(async {
            let uri = "";
            let data = serde_json::json!({ "title": "蒙起D路飞","text":"D之一族 \n 罗 \n 艾斯 \n" });
            let res = surf::post(uri).body_json(&data).unwrap().await?;
            assert_eq!(res.status(), http_types::StatusCode::Ok);
            Ok::<(), http_types::Error>(())
        });
    }));
    loop {
        sched.tick();
        std::thread::sleep(Duration::from_millis(500));
    }
    Ok::<(), http_types::Error>(())
}
